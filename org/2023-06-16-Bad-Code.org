#+OPTIONS: toc:nil
#+BEGIN_EXPORT html
---
layout: default
title: Bad Code 
subtitle: Or, code which does not follow best practices.
---
#+END_EXPORT
#+TOC: headlines 2
* Bad Code
For the first 5 years of my career, I was a database applications developer working for the University of Denver. I made my living writing bad code. But guess what? It didn't matter. Bad code ([[https://en.wikipedia.org/wiki/Real-time_computing][except in certain domains]]) does not kill people. Nobody lost their job, or any money, or their life, as a result of my bad code. Instead, I was promoted several times, earned a masters degree ("this guy can code!"), and was hired by a Fortune 100 company. And that is because I delivered code that met its requirements and worked.

There were 2 senior engineers on my team, who in 5 years never once looked at a single line of code I wrote. One sage engineer told me in year 2 or 3, "it is convenient to break your code into separate functions." He was right. Nobody ever mentioned "unit testing" to me -- either worked, or it didn't[fn:1].

I'm sure plenty of my bad, working code is still in production today, serving critical functions for the university. Accountants are currently using my bad code to post transactions into the universities operating ledger (an enhancement I was lauded for, and which failed in Production only 1 time). HR teams are using my bad code to transmit HR data to their health care providers. My terrible code enabled the university to track and coordinate quarantines and lockdowns during the Covid-19 pandemic.

As it turns out, this bad code didn't really matter. Computers have a nifty way of executing correctly written code extremely consistently.

Do you know what does matter? Understanding the requirements and delivering them. What mattered was that I took ownership of these projects, understood my customers needs, and produced software assets that worked. I was a one-man-band: business analyst, project manager, and engineer. I learned things that today remain the most important parts of who I am as an engineer[fn:2].

** What is bad code?
Bad code is code that fails to meet it's requirements. Bad code is code that doesn't work. Given an input, bad code is code that fails.

** What it's not
Bad code is not code which lives in one big file. It's not code that favors for-loops over list-comprehensions[fn:3]. Bad code is only bad /in context/.

At the University of Denver I wrote a lot of projects I dubbed "1 Giant SQL File". These were projects -- mission-critical pieces of the University's financial data needs -- implemented in one giant file which exist on the proudction server. The nightly process that transmits data to all of the benefits providers, enabling employees to have their Doctor's visits covered by insurance, is one .sql file, and one .shl script. They do not live in a github repo. They don't even exist in the same folder. The shell script is executed via cron on Thursday mornings. There are no unit tests. Over the years, I refactored it a couple of times to make it more flexible, and to implement some tricks I learned with temporary tables. When I was finished, I told the dba, who copied the file from the dev server to the production server (more about CI/CD and Automated Delivery pipelines here[fn:4]).

I'm here to tell you that that is not bad code. It's being used today, and I guarantee it has never failed. It works dutifully, like all members of the university community who have long over stayed their welcome. That is code which met all of the requirements.

Unfortunately, if I wrote a project today in one giant file, I would be laughed out of my cushy Fortune 100 job, and so I must critique the aforementioned process. Because despite working, it's a tower built of tooth-picks and gum on the verge of collapse. The code I write today, faces far more stringent requirements. And so for me, and the purposes of these blogs, it's about defining what are my boundaries? What my requirements for me to look at code, and accept it into a codebase I own?

** What I think today
In year 6 of my career, now at a Fortune 100 company, the game changed. I began receiving regular code reviews. While being chastised by a Lead Engineer for a Pull-request I'd posted, I discretely Googled "What's a unit test?". I recall nodding knowingly at the screen: this would have been helpful a few years ago.

The funny thing is, this is all learnable, and it's all relatively easy. I picked up the tricks of the Good Code game in about a year, and was again promoted. How did I manage to get promoted? Because I delivered code which met its requirements and worked.

At the end of year 7, I am now writing this blog to capture everything I've learned along the way.

[fn:1] As a funny aside, one time, the checks printed by the University started bouncing because the [[https://en.wikipedia.org/wiki/Magnetic_ink_character_recognition][MICR Code]] at the bottom became misaligned. The development lifecycle in this case entailed updating the offsets in some archaic Oracle Pl/SQL Check-printing library, printing a check on computer paper, scanning it, and sending it to a bank. The bank would tell us if the check was deemed valid or not. After several iterations, we received the all-clear on computer paper. To call this project done, we printed a real check and mailed it to the bank for validation. It was a real "Catch Me If You Can" moment when the checks I'd counterfitted (I mean, fixed) started working. These are the sorts of things with plague payroll departments in Universities.

[fn:2] TODO: Write this blog post.

[fn:3] TODO: Write this blog post.

[fn:4] TODO: Write this blog post.
